# ruff: noqa

import sys

stdout = sys.stdout
sys.stdout = sys.stderr

import io
import types

import skrub
from skrub._expressions import _expressions

file = io.StringIO()
p = file.write

p("""\
# fmt: off
# ruff: noqa

# DO NOT EDIT THIS FILE.
# IT IS AUTOMATICALLY GENERATED BY /build_tools/generate_expressions_stub.py

from typing import Callable

from skrub._expressions._expressions import SkrubNamespace

class Expr:
    skb: SkrubNamespace
""")

for name in sorted(skrub.Expr.__dict__):
    if name not in [
        "__bool__",
        "__contains__",
        "__dict__",
        "__doc__",
        "__hash__",
        "__init__",
        "__iter__",
        "__module__",
        "__setattr__",
        "__setitem__",
        "__signature__",
        "__weakref__",
        "skb",
    ]:
        p(f"    def {name}(*args, **kwargs) -> Expr: ...\n")

p("\n")

not_an_expression_factory = ["deferred"]

for name in sorted(set(_expressions.__dict__).intersection(skrub.__dict__)):
    obj = getattr(_expressions, name)
    if isinstance(obj, types.FunctionType) and name not in not_an_expression_factory:
        p(f"def {name}(*args, **kwargs) -> Expr: ...\n")

p("def deferred(*args, **kwargs) -> Callable: ...\n")

stdout.write(file.getvalue())
